//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayersControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayersControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayersControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayersControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""90fa2a1c-3b47-43aa-ad03-a1550fd31e78"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0b6fd241-ce66-4eb7-8240-82067185043e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""55c351ed-5a82-42f1-94a8-7b3171a204bb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""selection gauche"",
                    ""type"": ""Button"",
                    ""id"": ""3971ae1a-913e-4d81-a005-c17fcf2b5535"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""selection droite"",
                    ""type"": ""Button"",
                    ""id"": ""4c8cb963-925c-4af4-84b7-4ec0ffae4c52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""selection enter"",
                    ""type"": ""Button"",
                    ""id"": ""cb2fe07f-a27b-4bf9-96ca-f2d29ea62f35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""selection haut"",
                    ""type"": ""Button"",
                    ""id"": ""ad2e550f-09d3-492c-809f-39099741041b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""selection bas"",
                    ""type"": ""Button"",
                    ""id"": ""a3ad6599-3379-4d33-86ab-c2f30a101df0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""f2f40820-bc6c-42f4-b43b-0fd7c75c2eb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause Menu"",
                    ""type"": ""Button"",
                    ""id"": ""a4db98a7-a6c9-40b8-a9c5-f3e16d31fb50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c0f92ada-40ad-4db3-a72c-2a48f92f1f22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotbar Selection"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d2cbd824-b4b3-4cf5-92a7-9b4dd6a58120"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSelectedItem"",
                    ""type"": ""Button"",
                    ""id"": ""8a6ebc29-5e1c-48c3-a11e-cad5c52e0490"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""97787cd8-091a-458a-96ad-558b9949c0c7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0d396841-6372-4025-9bdf-89b0f34db4c5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ef0ff1f6-f378-4e9f-8518-e1ac1890cedb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a32e6b58-0904-48c7-b117-5c07d5b0cb33"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b04e3aaf-9a09-456a-a63c-d8254aaa1cee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a0a96e52-be18-4d34-a8cb-ffee5c822b9f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57196761-441c-43dc-b346-28eb27710b22"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""selection gauche"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""586da016-9a6e-4d34-841d-8a89049b300c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""selection gauche"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b99a6489-f01c-4f73-bf44-267fed33ad5e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""selection droite"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66e2a861-1e15-4c40-81aa-1f1cfa91cd1d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""selection droite"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0634661-6abb-42f5-949a-e871d8ac4103"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""selection enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2191627a-7668-45a1-81a9-2768a67b6d97"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""selection haut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a91d085-0433-454a-9ffd-087f9cb11f7f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""selection haut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ada8a5f-55a6-4b62-b586-2e86b5184b4d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""selection bas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c041464d-0710-41c7-8548-9b6f13a075d4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""selection bas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63f20fb5-327c-404d-bf59-67bc8af34038"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c496e1ac-5a54-4297-9fed-c2b231b214da"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30deb3d2-e526-4258-ac37-bc4b38fef3d3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""232b807a-8dad-419e-8ef1-4d0bec862ff9"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotbar Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d883f56a-3efe-4e48-9c78-a5fbb1fefb78"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseSelectedItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus"",
            ""id"": ""bb7956ee-3856-4de0-83e9-a0e367dd4bd8"",
            ""actions"": [
                {
                    ""name"": ""SplitStackInHalf"",
                    ""type"": ""Button"",
                    ""id"": ""fce46460-18cc-469e-92a0-ae899acdabc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TakeOneItemFromStack"",
                    ""type"": ""Button"",
                    ""id"": ""e84dc22c-a199-4516-a00e-e894273ae697"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""4c49d5e9-e99d-46e9-9887-603fb5bcbb34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b8bc3073-245e-44dc-8859-7027b27982fe"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SplitStackInHalf"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85a31798-7aef-41fc-a66d-d94c69443cc2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakeOneItemFromStack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8041850-0fea-41ba-9350-c989dcd6309b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Rotation = m_Player.FindAction("Rotation", throwIfNotFound: true);
        m_Player_selectiongauche = m_Player.FindAction("selection gauche", throwIfNotFound: true);
        m_Player_selectiondroite = m_Player.FindAction("selection droite", throwIfNotFound: true);
        m_Player_selectionenter = m_Player.FindAction("selection enter", throwIfNotFound: true);
        m_Player_selectionhaut = m_Player.FindAction("selection haut", throwIfNotFound: true);
        m_Player_selectionbas = m_Player.FindAction("selection bas", throwIfNotFound: true);
        m_Player_OpenInventory = m_Player.FindAction("Open Inventory", throwIfNotFound: true);
        m_Player_PauseMenu = m_Player.FindAction("Pause Menu", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_HotbarSelection = m_Player.FindAction("Hotbar Selection", throwIfNotFound: true);
        m_Player_UseSelectedItem = m_Player.FindAction("UseSelectedItem", throwIfNotFound: true);
        // Menus
        m_Menus = asset.FindActionMap("Menus", throwIfNotFound: true);
        m_Menus_SplitStackInHalf = m_Menus.FindAction("SplitStackInHalf", throwIfNotFound: true);
        m_Menus_TakeOneItemFromStack = m_Menus.FindAction("TakeOneItemFromStack", throwIfNotFound: true);
        m_Menus_Close = m_Menus.FindAction("Close", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Rotation;
    private readonly InputAction m_Player_selectiongauche;
    private readonly InputAction m_Player_selectiondroite;
    private readonly InputAction m_Player_selectionenter;
    private readonly InputAction m_Player_selectionhaut;
    private readonly InputAction m_Player_selectionbas;
    private readonly InputAction m_Player_OpenInventory;
    private readonly InputAction m_Player_PauseMenu;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_HotbarSelection;
    private readonly InputAction m_Player_UseSelectedItem;
    public struct PlayerActions
    {
        private @PlayersControls m_Wrapper;
        public PlayerActions(@PlayersControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Rotation => m_Wrapper.m_Player_Rotation;
        public InputAction @selectiongauche => m_Wrapper.m_Player_selectiongauche;
        public InputAction @selectiondroite => m_Wrapper.m_Player_selectiondroite;
        public InputAction @selectionenter => m_Wrapper.m_Player_selectionenter;
        public InputAction @selectionhaut => m_Wrapper.m_Player_selectionhaut;
        public InputAction @selectionbas => m_Wrapper.m_Player_selectionbas;
        public InputAction @OpenInventory => m_Wrapper.m_Player_OpenInventory;
        public InputAction @PauseMenu => m_Wrapper.m_Player_PauseMenu;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @HotbarSelection => m_Wrapper.m_Player_HotbarSelection;
        public InputAction @UseSelectedItem => m_Wrapper.m_Player_UseSelectedItem;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @selectiongauche.started += instance.OnSelectiongauche;
            @selectiongauche.performed += instance.OnSelectiongauche;
            @selectiongauche.canceled += instance.OnSelectiongauche;
            @selectiondroite.started += instance.OnSelectiondroite;
            @selectiondroite.performed += instance.OnSelectiondroite;
            @selectiondroite.canceled += instance.OnSelectiondroite;
            @selectionenter.started += instance.OnSelectionenter;
            @selectionenter.performed += instance.OnSelectionenter;
            @selectionenter.canceled += instance.OnSelectionenter;
            @selectionhaut.started += instance.OnSelectionhaut;
            @selectionhaut.performed += instance.OnSelectionhaut;
            @selectionhaut.canceled += instance.OnSelectionhaut;
            @selectionbas.started += instance.OnSelectionbas;
            @selectionbas.performed += instance.OnSelectionbas;
            @selectionbas.canceled += instance.OnSelectionbas;
            @OpenInventory.started += instance.OnOpenInventory;
            @OpenInventory.performed += instance.OnOpenInventory;
            @OpenInventory.canceled += instance.OnOpenInventory;
            @PauseMenu.started += instance.OnPauseMenu;
            @PauseMenu.performed += instance.OnPauseMenu;
            @PauseMenu.canceled += instance.OnPauseMenu;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @HotbarSelection.started += instance.OnHotbarSelection;
            @HotbarSelection.performed += instance.OnHotbarSelection;
            @HotbarSelection.canceled += instance.OnHotbarSelection;
            @UseSelectedItem.started += instance.OnUseSelectedItem;
            @UseSelectedItem.performed += instance.OnUseSelectedItem;
            @UseSelectedItem.canceled += instance.OnUseSelectedItem;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @selectiongauche.started -= instance.OnSelectiongauche;
            @selectiongauche.performed -= instance.OnSelectiongauche;
            @selectiongauche.canceled -= instance.OnSelectiongauche;
            @selectiondroite.started -= instance.OnSelectiondroite;
            @selectiondroite.performed -= instance.OnSelectiondroite;
            @selectiondroite.canceled -= instance.OnSelectiondroite;
            @selectionenter.started -= instance.OnSelectionenter;
            @selectionenter.performed -= instance.OnSelectionenter;
            @selectionenter.canceled -= instance.OnSelectionenter;
            @selectionhaut.started -= instance.OnSelectionhaut;
            @selectionhaut.performed -= instance.OnSelectionhaut;
            @selectionhaut.canceled -= instance.OnSelectionhaut;
            @selectionbas.started -= instance.OnSelectionbas;
            @selectionbas.performed -= instance.OnSelectionbas;
            @selectionbas.canceled -= instance.OnSelectionbas;
            @OpenInventory.started -= instance.OnOpenInventory;
            @OpenInventory.performed -= instance.OnOpenInventory;
            @OpenInventory.canceled -= instance.OnOpenInventory;
            @PauseMenu.started -= instance.OnPauseMenu;
            @PauseMenu.performed -= instance.OnPauseMenu;
            @PauseMenu.canceled -= instance.OnPauseMenu;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @HotbarSelection.started -= instance.OnHotbarSelection;
            @HotbarSelection.performed -= instance.OnHotbarSelection;
            @HotbarSelection.canceled -= instance.OnHotbarSelection;
            @UseSelectedItem.started -= instance.OnUseSelectedItem;
            @UseSelectedItem.performed -= instance.OnUseSelectedItem;
            @UseSelectedItem.canceled -= instance.OnUseSelectedItem;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Menus
    private readonly InputActionMap m_Menus;
    private List<IMenusActions> m_MenusActionsCallbackInterfaces = new List<IMenusActions>();
    private readonly InputAction m_Menus_SplitStackInHalf;
    private readonly InputAction m_Menus_TakeOneItemFromStack;
    private readonly InputAction m_Menus_Close;
    public struct MenusActions
    {
        private @PlayersControls m_Wrapper;
        public MenusActions(@PlayersControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SplitStackInHalf => m_Wrapper.m_Menus_SplitStackInHalf;
        public InputAction @TakeOneItemFromStack => m_Wrapper.m_Menus_TakeOneItemFromStack;
        public InputAction @Close => m_Wrapper.m_Menus_Close;
        public InputActionMap Get() { return m_Wrapper.m_Menus; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenusActions set) { return set.Get(); }
        public void AddCallbacks(IMenusActions instance)
        {
            if (instance == null || m_Wrapper.m_MenusActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenusActionsCallbackInterfaces.Add(instance);
            @SplitStackInHalf.started += instance.OnSplitStackInHalf;
            @SplitStackInHalf.performed += instance.OnSplitStackInHalf;
            @SplitStackInHalf.canceled += instance.OnSplitStackInHalf;
            @TakeOneItemFromStack.started += instance.OnTakeOneItemFromStack;
            @TakeOneItemFromStack.performed += instance.OnTakeOneItemFromStack;
            @TakeOneItemFromStack.canceled += instance.OnTakeOneItemFromStack;
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
        }

        private void UnregisterCallbacks(IMenusActions instance)
        {
            @SplitStackInHalf.started -= instance.OnSplitStackInHalf;
            @SplitStackInHalf.performed -= instance.OnSplitStackInHalf;
            @SplitStackInHalf.canceled -= instance.OnSplitStackInHalf;
            @TakeOneItemFromStack.started -= instance.OnTakeOneItemFromStack;
            @TakeOneItemFromStack.performed -= instance.OnTakeOneItemFromStack;
            @TakeOneItemFromStack.canceled -= instance.OnTakeOneItemFromStack;
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
        }

        public void RemoveCallbacks(IMenusActions instance)
        {
            if (m_Wrapper.m_MenusActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenusActions instance)
        {
            foreach (var item in m_Wrapper.m_MenusActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenusActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenusActions @Menus => new MenusActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnSelectiongauche(InputAction.CallbackContext context);
        void OnSelectiondroite(InputAction.CallbackContext context);
        void OnSelectionenter(InputAction.CallbackContext context);
        void OnSelectionhaut(InputAction.CallbackContext context);
        void OnSelectionbas(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
        void OnPauseMenu(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnHotbarSelection(InputAction.CallbackContext context);
        void OnUseSelectedItem(InputAction.CallbackContext context);
    }
    public interface IMenusActions
    {
        void OnSplitStackInHalf(InputAction.CallbackContext context);
        void OnTakeOneItemFromStack(InputAction.CallbackContext context);
        void OnClose(InputAction.CallbackContext context);
    }
}
